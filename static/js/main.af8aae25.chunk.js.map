{"version":3,"sources":["constants/index.js","selectors/getWhiteDirection.js","selectors/getBlackDirection.js","selectors/getKingDirection.js","stores/CheckersStore.js","components/KingIcon.js","components/Piece.js","components/Checkers.js","App.js","serviceWorker.js","index.js"],"names":["WHITE","board","position","isContinouse","availablePositions","leftCode","R","row","column","push","captured","getLeftDirection","rightCode","getRightDirection","getEnemyCode","code","enemyCode","calculatePosition","calculateCode","getLeftTopDirection","getRightTopDirection","getLeftBottomDirection","getRightBottomDirection","checker","isKing","black","white","empty","initialBoard","CheckersStore","turn","selected","this","newPosition","piece","getAvailablePositions","getKingDirection","getWhiteDirection","getBlackDirection","length","decorate","observable","computed","getWinner","clickOnPiece","action","move","reset","KingIcon","size","color","props","viewBox","width","height","fill","d","Circle","styled","div","active","enabled","inject","observer","checkersStore","ratio","Fragment","onClick","Wrapper","Square","dark","Array","keys","map","availablePosition","key","undefined","Title","h1","Turn","p","Link","a","winner","Boolean","window","location","hostname","match","GlobalStyle","createGlobalStyle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.af8aae25.chunk.js","sourcesContent":["export const BLACK = 'b'\nexport const WHITE = 'w'\nexport const EMPTY = ''\n","import * as R from 'ramda'\nimport { BLACK, EMPTY } from '../constants'\n\nconst getLeftDirection = (board, position, isContinouse) => {\n  const availablePositions = []\n  const leftCode = R.path([position.row - 1, position.column - 1, 'code'])(\n    board,\n  )\n  if (!isContinouse && leftCode === EMPTY) {\n    availablePositions.push({\n      row: position.row - 1,\n      column: position.column - 1,\n    })\n  } else if (\n    leftCode === BLACK &&\n    R.path([position.row - 2, position.column - 2, 'code'])(board) === EMPTY\n  ) {\n    availablePositions.push({\n      row: position.row - 2,\n      column: position.column - 2,\n      captured: { row: position.row - 1, column: position.column - 1 },\n    })\n  }\n  return availablePositions\n}\n\nconst getRightDirection = (board, position, isContinouse) => {\n  const availablePositions = []\n  const rightCode = R.path([position.row - 1, position.column + 1, 'code'])(\n    board,\n  )\n  if (!isContinouse && rightCode === EMPTY) {\n    availablePositions.push({\n      row: position.row - 1,\n      column: position.column + 1,\n    })\n  } else if (\n    rightCode === BLACK &&\n    R.path([position.row - 2, position.column + 2, 'code'])(board) === EMPTY\n  ) {\n    availablePositions.push({\n      row: position.row - 2,\n      column: position.column + 2,\n      captured: { row: position.row - 1, column: position.column + 1 },\n    })\n  }\n  return availablePositions\n}\n\nexport default (board, position, isContinouse) => [\n  ...getLeftDirection(board, position, isContinouse),\n  ...getRightDirection(board, position, isContinouse),\n]\n","import * as R from 'ramda'\nimport { WHITE, EMPTY } from '../constants'\n\nconst getLeftDirection = (board, position, isContinouse) => {\n  const availablePositions = []\n  const leftCode = R.path([position.row + 1, position.column - 1, 'code'])(\n    board,\n  )\n  if (!isContinouse && leftCode === EMPTY) {\n    availablePositions.push({\n      row: position.row + 1,\n      column: position.column - 1,\n    })\n  } else if (\n    leftCode === WHITE &&\n    R.path([position.row + 2, position.column - 2, 'code'])(board) === EMPTY\n  ) {\n    availablePositions.push({\n      row: position.row + 2,\n      column: position.column - 2,\n      captured: { row: position.row + 1, column: position.column - 1 },\n    })\n  }\n  return availablePositions\n}\n\nconst getRightDirection = (board, position, isContinouse) => {\n  const availablePositions = []\n  const rightCode = R.path([position.row + 1, position.column + 1, 'code'])(\n    board,\n  )\n  if (!isContinouse && rightCode === EMPTY) {\n    availablePositions.push({\n      row: position.row + 1,\n      column: position.column + 1,\n    })\n  } else if (\n    rightCode === WHITE &&\n    R.path([position.row + 2, position.column + 2, 'code'])(board) === EMPTY\n  ) {\n    availablePositions.push({\n      row: position.row + 2,\n      column: position.column + 2,\n      captured: { row: position.row + 1, column: position.column + 1 },\n    })\n  }\n  return availablePositions\n}\n\nexport default (board, position, isContinouse) => [\n  ...getLeftDirection(board, position, isContinouse),\n  ...getRightDirection(board, position, isContinouse),\n]\n","import * as R from 'ramda'\nimport { BLACK, WHITE, EMPTY } from '../constants'\n\nconst getEnemyCode = code => (code === WHITE ? BLACK : WHITE)\n\nconst getLeftTopDirection = (code, board, position, isContinouse) => {\n  const availablePositions = []\n  const enemyCode = getEnemyCode(code)\n\n  let calculatePosition = { row: position.row - 1, column: position.column - 1 }\n  while (calculatePosition.row >= 0 && calculatePosition.column >= 0) {\n    const calculateCode = R.path([\n      calculatePosition.row,\n      calculatePosition.column,\n      'code',\n    ])(board)\n    if (!isContinouse && calculateCode === EMPTY) {\n      availablePositions.push(calculatePosition)\n    } else if (\n      calculateCode === enemyCode &&\n      calculatePosition.row - 1 >= 0 &&\n      calculatePosition.column - 1 >= 0 &&\n      R.path([calculatePosition.row - 1, calculatePosition.column - 1, 'code'])(\n        board,\n      ) === EMPTY\n    ) {\n      availablePositions.push({\n        row: calculatePosition.row - 1,\n        column: calculatePosition.column - 1,\n        captured: calculatePosition,\n      })\n      break\n    }\n    calculatePosition = {\n      row: calculatePosition.row - 1,\n      column: calculatePosition.column - 1,\n    }\n  }\n  return availablePositions\n}\n\nconst getRightTopDirection = (code, board, position, isContinouse) => {\n  const availablePositions = []\n  const enemyCode = getEnemyCode(code)\n\n  let calculatePosition = { row: position.row - 1, column: position.column + 1 }\n  while (calculatePosition.row >= 0 && calculatePosition.column <= 7) {\n    const calculateCode = R.path([\n      calculatePosition.row,\n      calculatePosition.column,\n      'code',\n    ])(board)\n    if (!isContinouse && calculateCode === EMPTY) {\n      availablePositions.push(calculatePosition)\n    } else if (\n      calculateCode === enemyCode &&\n      calculatePosition.row - 1 >= 0 &&\n      calculatePosition.column + 1 <= 7 &&\n      R.path([calculatePosition.row - 1, calculatePosition.column + 1, 'code'])(\n        board,\n      ) === EMPTY\n    ) {\n      availablePositions.push({\n        row: calculatePosition.row - 1,\n        column: calculatePosition.column + 1,\n        captured: calculatePosition,\n      })\n      break\n    }\n    calculatePosition = {\n      row: calculatePosition.row - 1,\n      column: calculatePosition.column + 1,\n    }\n  }\n  return availablePositions\n}\n\nconst getLeftBottomDirection = (code, board, position, isContinouse) => {\n  const availablePositions = []\n  const enemyCode = getEnemyCode(code)\n\n  let calculatePosition = { row: position.row + 1, column: position.column - 1 }\n  while (calculatePosition.row <= 7 && calculatePosition.column >= 0) {\n    const calculateCode = R.path([\n      calculatePosition.row,\n      calculatePosition.column,\n      'code',\n    ])(board)\n    if (!isContinouse && calculateCode === EMPTY) {\n      availablePositions.push(calculatePosition)\n    } else if (\n      calculateCode === enemyCode &&\n      calculatePosition.row + 1 <= 7 &&\n      calculatePosition.column - 1 >= 0 &&\n      R.path([calculatePosition.row + 1, calculatePosition.column - 1, 'code'])(\n        board,\n      ) === EMPTY\n    ) {\n      availablePositions.push({\n        row: calculatePosition.row + 1,\n        column: calculatePosition.column - 1,\n        captured: calculatePosition,\n      })\n      break\n    }\n    calculatePosition = {\n      row: calculatePosition.row + 1,\n      column: calculatePosition.column - 1,\n    }\n  }\n  return availablePositions\n}\n\nconst getRightBottomDirection = (code, board, position, isContinouse) => {\n  const availablePositions = []\n  const enemyCode = getEnemyCode(code)\n\n  let calculatePosition = { row: position.row + 1, column: position.column + 1 }\n  while (calculatePosition.row <= 7 && calculatePosition.column <= 7) {\n    const calculateCode = R.path([\n      calculatePosition.row,\n      calculatePosition.column,\n      'code',\n    ])(board)\n    if (!isContinouse && calculateCode === EMPTY) {\n      availablePositions.push(calculatePosition)\n    } else if (\n      calculateCode === enemyCode &&\n      calculatePosition.row + 1 <= 7 &&\n      calculatePosition.column + 1 <= 7 &&\n      R.path([calculatePosition.row + 1, calculatePosition.column + 1, 'code'])(\n        board,\n      ) === EMPTY\n    ) {\n      availablePositions.push({\n        row: calculatePosition.row + 1,\n        column: calculatePosition.column + 1,\n        captured: calculatePosition,\n      })\n      break\n    }\n    calculatePosition = {\n      row: calculatePosition.row + 1,\n      column: calculatePosition.column + 1,\n    }\n  }\n  return availablePositions\n}\n\nexport default (code, board, position, isContinouse) => [\n  ...getLeftTopDirection(code, board, position, isContinouse),\n  ...getRightTopDirection(code, board, position, isContinouse),\n  ...getLeftBottomDirection(code, board, position, isContinouse),\n  ...getRightBottomDirection(code, board, position, isContinouse),\n]\n","import * as R from 'ramda'\nimport { decorate, observable, computed, action } from 'mobx'\nimport { BLACK, WHITE, EMPTY } from '../constants'\nimport getWhiteDirection from '../selectors/getWhiteDirection'\nimport getBlackDirection from '../selectors/getBlackDirection'\nimport getKingDirection from '../selectors/getKingDirection'\n\nconst checker = (code, isKing = false) => ({ code, isKing })\nconst black = checker(BLACK)\nconst white = checker(WHITE)\nconst empty = checker(EMPTY)\n\nconst initialBoard = [\n  [empty, black, empty, black, empty, black, empty, black],\n  [black, empty, black, empty, black, empty, black, empty],\n  [empty, empty, empty, empty, empty, empty, empty, empty],\n  [empty, empty, empty, empty, empty, empty, empty, empty],\n  [empty, empty, empty, empty, empty, empty, empty, empty],\n  [empty, empty, empty, empty, empty, empty, empty, empty],\n  [empty, white, empty, white, empty, white, empty, white],\n  [white, empty, white, empty, white, empty, white, empty],\n]\n\nclass CheckersStore {\n  board = initialBoard\n  turn = WHITE\n  selected = null\n  isContinouse = false\n\n  get getAvailablePositions() {\n    if (this.selected) {\n      const piece = this.board[this.selected.row][this.selected.column]\n      if (piece.isKing)\n        return getKingDirection(\n          this.turn,\n          this.board,\n          this.selected,\n          this.isContinouse,\n        )\n      if (piece.code === WHITE)\n        return getWhiteDirection(this.board, this.selected, this.isContinouse)\n      return getBlackDirection(this.board, this.selected, this.isContinouse)\n    }\n    return []\n  }\n\n  get getWinner() {\n    if (!R.filter(({ code }) => code === BLACK)(R.flatten(this.board)).length)\n      return WHITE\n    if (!R.filter(({ code }) => code === WHITE)(R.flatten(this.board)).length)\n      return BLACK\n    return undefined\n  }\n\n  clickOnPiece(code, position) {\n    if (this.turn === code) {\n      this.selected = R.equals(this.selected)(position) ? null : position\n    }\n  }\n\n  move({ captured, ...newPosition }) {\n    // move\n    const piece = this.board[this.selected.row][this.selected.column]\n    this.board[this.selected.row][this.selected.column] = empty\n    this.board[newPosition.row][newPosition.column] = piece\n\n    // captured enemy piece\n    if (captured) {\n      this.board[captured.row][captured.column] = empty\n      this.selected = newPosition\n      this.isContinouse = true\n      if (!R.isEmpty(this.getAvailablePositions)) return\n    }\n\n    // isKing\n    if (this.turn === WHITE && newPosition.row === 0)\n      this.board[newPosition.row][newPosition.column].isKing = true\n    else if (this.turn === BLACK && newPosition.row === 7)\n      this.board[newPosition.row][newPosition.column].isKing = true\n\n    // end turn\n    this.turn = this.turn === WHITE ? BLACK : WHITE\n    this.selected = null\n    this.isContinouse = false\n  }\n\n  reset() {\n    this.board = initialBoard\n    this.turn = WHITE\n    this.selected = null\n    this.isContinouse = false\n  }\n}\n\ndecorate(CheckersStore, {\n  // observable\n  board: observable,\n  turn: observable,\n  selected: observable,\n\n  // computed\n  getAvailablePositions: computed,\n  getWinner: computed,\n\n  // action\n  clickOnPiece: action,\n  move: action,\n  reset: action,\n})\n\nexport default CheckersStore\n","import React from 'react'\n\nconst KingIcon = ({ size='1em', color='Black', ...props }) => (\n  <svg {...props} viewBox=\"0 0 472.615 472.615\" width={size} height={size}>\n    <path fill={color} d=\"M436.475 103.262c-19.961 0-36.141 16.18-36.141 36.141 0 9.776 3.92 18.613 10.226 25.12l-74.195 71.928-76.969-122.068c12.207-7.695 20.378-21.202 20.378-36.7 0-24.005-19.46-43.467-43.466-43.467-24.005 0-43.465 19.462-43.465 43.467 0 15.468 8.139 28.961 20.31 36.666L136.215 236.45 62.05 164.528c6.311-6.505 10.232-15.346 10.232-25.125 0-19.961-16.181-36.141-36.141-36.141S0 119.442 0 139.403c0 19.959 16.181 36.139 36.141 36.139 2.196 0 4.322-.272 6.411-.647l34.27 166.474h318.972l34.27-166.474c2.088.378 4.215.647 6.412.647 19.96 0 36.14-16.18 36.14-36.139-.001-19.961-16.181-36.141-36.141-36.141zM391.714 361.061H80.875l-18.767 77.337h348.373z\" />\n  </svg>\n)\n\nexport default KingIcon\n","import * as R from 'ramda'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { observer, inject } from 'mobx-react'\nimport { BLACK } from '../constants'\nimport KingIcon from './KingIcon'\n\nconst Circle = styled.div`\n  background-color: ${props => (props.color === BLACK ? 'Black' : 'White')};\n  box-shadow: ${props => (props.active ? '0 0 10px DarkOrange' : 'none')};\n  width: ${props => props.size}%;\n  height: ${props => props.size}%;\n  border-radius: 100%;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: ${props => (props.enabled ? 'pointer' : 'default')};\n\n  &:after {\n    content: '';\n    width: 80%;\n    height: 80%;\n    top: 10%;\n    left: 10%;\n    position: absolute;\n    border: 1px solid\n      ${props => (props.color === BLACK ? 'LightGray' : 'DimGrey')};\n    border-radius: 100%;\n    box-sizing: border-box;\n  }\n`\n\nconst Piece = ({ checkersStore, checker, position, ratio = 0.9 }) => (\n  <React.Fragment>\n    {checker.code ? (\n      <Circle\n        color={checker.code}\n        enabled={\n          !checkersStore.isContinouse && checkersStore.turn === checker.code\n        }\n        active={R.equals(checkersStore.selected)(position)}\n        size={ratio * 100}\n        onClick={() =>\n          !checkersStore.isContinouse &&\n          checkersStore.clickOnPiece(checker.code, position)\n        }\n      >\n        {checker.isKing ? (\n          <KingIcon\n            color={checker.code === BLACK ? 'LightGray' : 'DimGrey'}\n            size={25}\n          />\n        ) : null}\n      </Circle>\n    ) : null}\n  </React.Fragment>\n)\n\nexport default inject('checkersStore')(observer(Piece))\n","import * as R from 'ramda'\nimport React from 'react'\nimport styled from 'styled-components'\nimport { observer, inject } from 'mobx-react'\nimport Piece from './Piece'\n\nconst Wrapper = styled.div`\n  width: calc(100vw - 20px);\n  height: calc(100vw - 20px);\n  max-width: ${props => props.size * 8}px;\n  max-height: ${props => props.size * 8}px;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: stretch;\n`\n\nconst Square = styled.div`\n  width: calc((100vw - 20px) / 8);\n  height: calc((100vw - 20px) / 8);\n  max-width: ${props => props.size}px;\n  max-height: ${props => props.size}px;\n  background: ${props => (props.dark ? 'DimGrey' : 'LightGrey')};\n  box-shadow: ${props => (props.active ? 'inset 0 0 10px DarkOrange' : 'none')};\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: ${props => (props.active ? 'pointer' : 'default')};\n`\n\nconst Checkers = ({ checkersStore, size = 75 }) => {\n  const availablePositions = checkersStore.getAvailablePositions\n  return (\n    <Wrapper size={size}>\n      {[...Array(8).keys()].map(row =>\n        [...Array(8).keys()].map(column => {\n          const position = { row, column }\n          const availablePosition = R.find(availablePosition =>\n            R.and(\n              R.propEq('row', position.row)(availablePosition),\n              R.propEq('column', position.column)(availablePosition),\n            ),\n          )(availablePositions)\n          return (\n            <Square\n              key={`${row}-${column}`}\n              active={!R.isNil(availablePosition)}\n              dark={(row + column) % 2 !== 0}\n              size={size}\n              onClick={\n                !R.isNil(availablePosition)\n                  ? () => checkersStore.move(availablePosition)\n                  : undefined\n              }\n            >\n              <Piece\n                checker={checkersStore.board[row][column]}\n                position={position}\n              />\n            </Square>\n          )\n        }),\n      )}\n    </Wrapper>\n  )\n}\n\nexport default inject('checkersStore')(observer(Checkers))\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Provider, observer } from 'mobx-react'\nimport CheckersStore from './stores/CheckersStore'\nimport Checkers from './components/Checkers'\nimport { BLACK } from './constants'\n\nconst checkersStore = new CheckersStore()\n\nconst Wrapper = styled.div`\n  min-height: 100vh;\n  padding: 15px 0;\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`\n\nconst Title = styled.h1`\n  color: DarkOrange;\n  margin-top: 0;\n  margin-bottom: 10px;\n`\n\nconst Turn = styled.p`\n  color: ${props => (props.code === BLACK ? 'black' : 'white')};\n  margin-top: 0;\n`\n\nconst Link = styled.a`\n  color: DarkOrange;\n  margin-left: 10px;\n  cursor: pointer;\n`\n\nconst App = () => {\n  const winner = checkersStore.getWinner\n  return (\n    <Provider checkersStore={checkersStore}>\n      <Wrapper>\n        <Title>Thai Checkers Game</Title>\n        {winner ? (\n          <Turn code={winner}>\n            {winner === BLACK ? 'black' : 'white'} win!\n            <Link onClick={() => checkersStore.reset()}>play again?</Link>\n          </Turn>\n        ) : (\n          <Turn code={checkersStore.turn}>\n            {checkersStore.turn === BLACK ? 'black' : 'white'} turn\n          </Turn>\n        )}\n        <Checkers />\n      </Wrapper>\n    </Provider>\n  )\n}\n\nexport default observer(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createGlobalStyle } from 'styled-components'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    font-family: 'Roboto', sans-serif;\n    background-color: SlateGrey;\n    margin: 0;\n  }\n`\n\nReactDOM.render(\n  <React.Fragment>\n    <GlobalStyle />\n    <App />\n  </React.Fragment>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}